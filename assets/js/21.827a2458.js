(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{382:function(t,a,s){t.exports=s.p+"assets/img/3-1Q113100151L5.b35a7361.gif"},440:function(t,a,s){"use strict";s.r(a);var r=s(42),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"开闭原则-面向对象设计原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则-面向对象设计原则"}},[t._v("#")]),t._v(" 开闭原则——面向对象设计原则")]),t._v(" "),r("p",[t._v("在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据 7 条原则来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。我们将在下面的几节中依次来介绍这 7 条原则，本节首先介绍开闭原则。")]),t._v(" "),r("h3",{attrs:{id:"开闭原则的定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则的定义"}},[t._v("#")]),t._v(" 开闭原则的定义")]),t._v(" "),r("p",[t._v("开闭原则（Open Closed Principle，OCP）由勃兰特·梅耶（Bertrand Meyer）提出，他在 1988 年的著作《面向对象软件构造》（Object Oriented Software Construction）中提出：软件实体应当对扩展开放，对修改关闭（Software entities should be open for extension，but closed for modification），这就是开闭原则的经典定义。")]),t._v(" "),r("p",[t._v("这里的软件实体包括以下几个部分：")]),t._v(" "),r("ol",[r("li",[t._v("项目中划分出的模块")]),t._v(" "),r("li",[t._v("类与接口")]),t._v(" "),r("li",[t._v("方法")])]),t._v(" "),r("p",[t._v("开闭原则的含义是：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。")]),t._v(" "),r("h3",{attrs:{id:"开闭原则的作用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则的作用"}},[t._v("#")]),t._v(" 开闭原则的作用")]),t._v(" "),r("p",[t._v("开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下。")]),t._v(" "),r("h5",{attrs:{id:"_1-对软件测试的影响"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-对软件测试的影响"}},[t._v("#")]),t._v(" 1. 对软件测试的影响")]),t._v(" "),r("p",[t._v("软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行。")]),t._v(" "),r("h5",{attrs:{id:"_2-可以提高代码的可复用性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-可以提高代码的可复用性"}},[t._v("#")]),t._v(" 2. 可以提高代码的可复用性")]),t._v(" "),r("p",[t._v("粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性。")]),t._v(" "),r("h5",{attrs:{id:"_3-可以提高软件的可维护性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-可以提高软件的可维护性"}},[t._v("#")]),t._v(" 3. 可以提高软件的可维护性")]),t._v(" "),r("p",[t._v("遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护。")]),t._v(" "),r("h3",{attrs:{id:"开闭原则的实现方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则的实现方法"}},[t._v("#")]),t._v(" 开闭原则的实现方法")]),t._v(" "),r("p",[t._v("可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中。")]),t._v(" "),r("p",[t._v("因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。")]),t._v(" "),r("p",[t._v("下面以 Windows 的桌面主题为例介绍开闭原则的应用。")]),t._v(" "),r("h5",{attrs:{id:"【例1】windows-的桌面主题设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#【例1】windows-的桌面主题设计"}},[t._v("#")]),t._v(" 【例1】Windows 的桌面主题设计")]),t._v(" "),r("p",[t._v("分析：Windows 的主题是桌面背景图片、窗口颜色和声音等元素的组合。用户可以根据自己的喜爱更换自己的桌面主题，也可以从网上下载新的主题。这些主题有共同的特点，可以为其定义一个抽象类（Abstract Subject），而每个具体的主题（Specific Subject）是其子类。用户窗体可以根据需要选择或者增加新的主题，而不需要修改原代码，所以它是满足开闭原则的，其类图如图 1 所示。")]),t._v(" "),r("p",[r("img",{attrs:{src:s(382),alt:""}})])])}),[],!1,null,null,null);a.default=e.exports}}]);